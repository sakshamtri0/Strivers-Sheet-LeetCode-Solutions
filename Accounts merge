class DSU {
    Map<String, String> p;
    public DSU(){
        p = new HashMap<>();
    }
    public String find(String x){
        if(!p.containsKey(x)){
            p.put(x, x);
        }
        if(x!=p.get(x)){
            p.put(x, find(p.get(x)));
        }
        return p.get(x);
    }
    void merge(String x, String y){
        String rx = find(x), ry = find(y);
        if(!rx.equals(ry)){
            p.put(rx, ry);
        }
    }
}
class Solution {
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        return new java.util.AbstractList<>(){
            List<List<String>> res = null;
            private void build(){
                if(res!=null) return;
                res = new ArrayList<>();
                DSU dsu = new DSU();
                Map<String, String> map = new HashMap<>();
                for(List<String> l: accounts){
                    String name = l.get(0);
                    for(int i=1;i<l.size();i++){
                        map.put(l.get(i), name);
                        dsu.find(l.get(i));
                        if(i>1){
                            dsu.merge(l.get(i), l.get(i-1));
                        }
                    }
                }
                Map<String, TreeSet<String>> m = new HashMap<>();
                for(String mail: map.keySet()){
                    String p = dsu.find(mail);
                    m.computeIfAbsent(p, k->new TreeSet<>()).add(mail);
                }
                for(Map.Entry<String, TreeSet<String>> ent: m.entrySet()){
                    List<String> t = new ArrayList<>();
                    t.add(map.get(ent.getKey()));
                    t.addAll(ent.getValue());
                    res.add(t);
                }
            }
            @Override
            public List<String> get(int i){
                build();
                return res.get(i);
            }
            @Override
            public int size(){
                build();
                return res.size();
            }
        };
    }
}
