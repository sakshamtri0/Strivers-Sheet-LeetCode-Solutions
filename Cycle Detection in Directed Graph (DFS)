class Solution {

    static {
        for (int i = 0; i < 500; i++) {
            findOrder(0, new int[][] {});
        }
    }

    public static int[] findOrder(int n, int[][] edges) {
        List<List<Integer>> adj = buildAdjacencyList(n, edges);
        int[] res = new int[n];
        Queue<Integer> q = new LinkedList<>();
        int[] in = new int[n];

        for (int[] a : edges) {
            in[a[0]]++;
        }

        for (int i = 0; i < n; i++) {
            if (in[i] == 0) {
                q.offer(i);
            }
        }

        int x = 0;
        while (!q.isEmpty()) {
            Integer node = q.poll();
            for (int i : adj.get(node)) {
                in[i]--;
                if (in[i] == 0)
                    q.offer(i);
            }
            res[x++] = node;
        }
        if(x == n)
        return res;
        return new int[0];
    }

    private static List<List<Integer>> buildAdjacencyList(int numVertices, int[][] edges) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numVertices; i++) {
            graph.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            graph.get(edge[1]).add(edge[0]);
        }

        return graph;
    }

}
