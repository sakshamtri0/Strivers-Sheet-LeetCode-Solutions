class Solution {
    public int minDistance(String word1, String word2) {
        int len1 = word1.length();
        int len2 = word2.length();
        
        if(len1==0 && len2==0){
            return 0;
        }
        if(len1==0){
            return len2;
        }
        if(len2==0){
            return len1;
        }

        int dp[][] = new int[len1][len2];
        for(int[] row: dp){
            Arrays.fill(row, -1);
        }

        return minOperations(word1, word2, len1-1, len2-1, dp);
    }

        public int minOperations(String word1, String word2, int i, int j, int[][] dp){
            if(i<0){
                return j+1;
            }
            if(j<0){
                return i+1;
            }

            if(dp[i][j] != -1) return dp[i][j];

            if(word1.charAt(i)==word2.charAt(j)){
                return dp[i][j] = minOperations(word1, word2, i-1, j-1, dp);
            }
            int min = Math.min(1 + minOperations(word1, word2, i-1, j, dp), 1 + minOperations(word1, word2, i-1, j-1, dp));

            return dp[i][j] = Math.min(min, 1 + minOperations(word1, word2, i, j-1, dp));
        }
}
