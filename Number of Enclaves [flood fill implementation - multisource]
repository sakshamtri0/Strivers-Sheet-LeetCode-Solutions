class Solution {
    public int numEnclaves(int[][] grid) {
        int m = grid.length, n = grid[0].length;

        // Step 1: Remove all land cells connected to boundary
        for (int i = 0; i < m; i++) {
            dfs(grid, i, 0);           // left border
            dfs(grid, i, n - 1);       // right border
        }

        for (int j = 0; j < n; j++) {
            dfs(grid, 0, j);           // top border
            dfs(grid, m - 1, j);       // bottom border
        }

        // Step 2: Count remaining land cells
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) count++;
            }
        }

        return count;
    }

    // DFS to mark visited land as water
    private void dfs(int[][] grid, int i, int j) {
        int m = grid.length, n = grid[0].length;

        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] != 1)
            return;

        grid[i][j] = 0;  // Mark as water to avoid revisit

        dfs(grid, i + 1, j);
        dfs(grid, i - 1, j);
        dfs(grid, i, j + 1);
        dfs(grid, i, j - 1);
    }
}
