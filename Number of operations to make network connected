class Solution {
        int par(int parent[],int u){
     if(parent[u]==u)
     return u;
     return parent[u]=par(parent,parent[u]);
    }
        void union(int parent[],int rank[],int u,int v){
      int ult_u= par(parent, u);
      int ult_v= par(parent,v);
      if(rank[ult_u]<rank[ult_v]){
        parent[ult_u]= ult_v;
      }
      else if(rank[ult_u]>rank[ult_v]){
        parent[ult_v]= ult_u;
      }
      else{
        parent[ult_v]= ult_u;
        rank[ult_u]++;
      }
    }
    public int makeConnected(int n, int[][] connections) {
    int rank[]= new int[n];
      int parent[]= new int[n];
      for(int i=0;i<parent.length;i++){
        parent[i]=i;
      }
      if(connections.length<n-1)
      return -1;
      for(int i=0;i<connections.length;i++){       
       union(parent,rank,connections[i][0],connections[i][1]);
      }
      int cn=0;
      for(int i=0;i<n;i++){
      if(parent[i]==i)
      cn++;
      }
      cn--;
      return cn;
    }
}
