import java.util.ArrayDeque;

class Solution {
    private static int bfs(final int[][] grid) {
        final var fromStart = new BFSRunner(grid, 0, 0, 's', 'e');
        final var fromEnd = new BFSRunner(grid, grid.length - 1, grid.length - 1, 'e', 's');
        int steps = 1;

        while (!(fromStart.queue.isEmpty() || fromEnd.queue.isEmpty())) {
            ++steps;

            if (fromStart.step()) {
                return steps;
            }

            ++steps;

            if (fromEnd.step()) {
                return steps;
            }
        }

        return -1;
    }

    public int shortestPathBinaryMatrix(int[][] grid) {
        if (grid[0][0] != 0 || grid[grid.length - 1][grid.length - 1] != 0) {
            return -1;
        }

        if (grid.length == 1) {
            return 1;
        }

        return bfs(grid);
    }

    private record Point(int y, int x) {
    }

    static class BFSRunner {
        final int end;
        final int[][] grid;
        final int mark;
        final int other;
        ArrayDeque<Point> queue;

        BFSRunner(int[][] grid, int y, int x, int mark, int other) {
            this.grid = grid;
            this.end = grid.length - 1;
            this.mark = mark;
            this.other = other;
            queue = new ArrayDeque<>();
            queue.add(new Point(y, x));
            grid[y][x] = mark;
        }

        boolean step() {
            for (int c = queue.size(); c > 0; --c) {
                final var p = queue.poll();
                final int yMin = Math.max(0, p.y() - 1);
                final int yMax = Math.min(end, p.y() + 1);
                final int xMin = Math.max(0, p.x() - 1);
                final int xMax = Math.min(end, p.x() + 1);

                for (int y = yMin; y <= yMax; ++y) {
                    for (int x = xMin; x <= xMax; ++x) {
                        if (grid[y][x] != 0) {
                            if (grid[y][x] == other) {
                                return true;
                            }

                            continue;
                        }

                        queue.add(new Point(y, x));
                        grid[y][x] = mark;
                    }
                }
            }

            return false;
        }
    }
}
